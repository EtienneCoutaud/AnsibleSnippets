<snippet>
<content><![CDATA[
${1:#default = if the target is a directory, setting this to yes will make it the default acl for entities created inside the directory. It causes an error if name is a file.
#entity = actual user or group that the ACL applies to when matching entity types user or group are selected.
#entry = DEPRECATED. The acl to set or remove.  This must always be quoted in the form of '<etype>:<qualifier>:<perms>'.  The qualifier may be empty for some types, but the type and perms are always requried. '-' can be used as placeholder when you do not care about permissions. This is now superseded by entity, type and permissions fields.
#etype = the entity type of the ACL to apply, see setfacl documentation for more info.
#follow = whether to follow symlinks on the path if a symlink is encountered.
#name = The full path of the file or object.
#permissions = Permissions to apply/remove can be any combination of r, w and  x (read, write and execute respectively)
#state = defines whether the ACL should be present or not.  The `query' state gets the current acl without changing it, for use in 'register' operations.
}- name: ${2:Name for acl module.}
${3:  sudo: ${4:yes}}
  acl: ${5:default=${6: } }${7:entity=${8: } }${9:entry=${10: } }${11:etype=${12: } }${13:follow=${14: } }${15:name=${16: } }${17:permissions=${18: } }${19:state=${20: } }
${21:  when: ${22: variable is defined}}
${23:  with_items: ${24: array}}
]]></content>
	<tabTrigger>acl</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
