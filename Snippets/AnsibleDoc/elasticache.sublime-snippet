<snippet>
<content><![CDATA[
${1:#aws_access_key = AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
#aws_secret_key = AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
#cache_engine_version = The version number of the cache engine
#cache_port = The port number on which each of the cache nodes will accept connections
#cache_security_groups = A list of cache security group names to associate with this cache cluster
#engine = Name of the cache engine to be used (memcached or redis)
#hard_modify = Whether to destroy and recreate an existing cache cluster if necessary in order to modify its state
#name = The cache cluster identifier
#node_type = The compute and memory capacity of the nodes in the cache cluster
#num_nodes = The initial number of cache nodes that the cache cluster will have
#region = The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.
#security_group_ids = A list of vpc security group names to associate with this cache cluster. Only use if inside a vpc
#state = `absent' or `present' are idempotent actions that will create or destroy a cache cluster as needed. `rebooted' will reboot the cluster, resulting in a momentary outage.
#wait = Wait for cache cluster result before returning
#zone = The EC2 Availability Zone in which the cache cluster will be created
}- name: ${2:Name for elasticache module.}
${3:  sudo: ${4:yes}}
  elasticache: ${5:aws_access_key=${6: } }${7:aws_secret_key=${8: } }${9:cache_engine_version=${10: } }${11:cache_port=${12: } }${13:cache_security_groups=${14: } }${15:engine=${16: } }${17:hard_modify=${18: } }${19:name=${20: } }${21:node_type=${22: } }${23:num_nodes=${24: } }${25:region=${26: } }${27:security_group_ids=${28: } }${29:state=${30: } }${31:wait=${32: } }${33:zone=${34: } }
${35:  when: ${36: variable is defined}}
${37:  with_items: ${38: array}}
]]></content>
	<tabTrigger>elasticache</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
