<snippet>
<content><![CDATA[
${1:#aws_access_key = AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
#aws_secret_key = AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
#cidr_block = The cidr block representing the VPC, e.g. 10.0.0.0/16
#dns_hostnames = toggles the "Enable DNS hostname support for instances" flag
#dns_support = toggles the "Enable DNS resolution" flag
#instance_tenancy = The supported tenancy options for instances launched into the VPC.
#internet_gateway = Toggle whether there should be an Internet gateway attached to the VPC
#region = region in which the resource exists.
#resource_tags = A dictionary array of resource tags of the form: { tag1: value1, tag2: value2 }.  Tags in this list are used in conjunction with CIDR block to uniquely identify a VPC in lieu of vpc_id. Therefore, if CIDR/Tag combination does not exits, a new VPC will be created.  VPC tags not on this list will be ignored. Prior to 1.7, specifying a resource tag was optional.
#route_tables = A dictionary array of route tables to add of the form: { subnets: [172.22.2.0/24, 172.22.3.0/24,], routes: [{ dest: 0.0.0.0/0, gw: igw},] }. Where the subnets list is those subnets the route table should be associated with, and the routes list is a list of routes to be in the table.  The special keyword for the gw of igw specifies that you should the route should go through the internet gateway attached to the VPC. gw also accepts instance-ids in addition igw. This module is currently unable to affect the "main" route table due to some limitations in boto, so you must explicitly define the associated subnets or they will be attached to the main table implicitly. As of 1.8, if the route_tables parameter is not specified, no existing routes will be modified.
#state = Create or terminate the VPC
#subnets = A dictionary array of subnets to add of the form: { cidr: ..., az: ... , resource_tags: ... }. Where az is the desired availability zone of the subnet, but it is not required. Tags (i.e.: resource_tags) is also optional and use dictionary form: { "Environment":"Dev", "Tier":"Web", ...}. All VPC subnets not in this list will be removed. As of 1.8, if the subnets parameter is not specified, no existing subnets will be modified.
#validate_certs = When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
#vpc_id = A VPC id to terminate when state=absent
#wait = wait for the VPC to be in state 'available' before returning
#wait_timeout = how long before wait gives up, in seconds
}- name: ${2:Name for ec2_vpc module.}
${3:  sudo: ${4:yes}}
  ec2_vpc: ${5:aws_access_key=${6: } }${7:aws_secret_key=${8: } }${9:cidr_block=${10: } }${11:dns_hostnames=${12: } }${13:dns_support=${14: } }${15:instance_tenancy=${16: } }${17:internet_gateway=${18: } }${19:region=${20: } }${21:resource_tags=${22: } }${23:route_tables=${24: } }${25:state=${26: } }${27:subnets=${28: } }${29:validate_certs=${30: } }${31:vpc_id=${32: } }${33:wait=${34: } }${35:wait_timeout=${36: } }
${37:  when: ${38: variable is defined}}
${39:  with_items: ${40: array}}
]]></content>
	<tabTrigger>ec2_vpc</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
