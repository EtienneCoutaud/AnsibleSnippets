<snippet>
<content><![CDATA[
${1:#api_key = Rackspace API key (overrides `credentials')
#auth_endpoint = The URI of the authentication service
#auto_increment = Whether or not to increment a single number with the name of the created servers. Only applicable when used with the `group' attribute or meta key.
#config_drive = Attach read-only configuration drive to server as label config-2
#count = number of instances to launch
#count_offset = number count to start at
#credentials = File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
#disk_config = Disk partitioning strategy
#env = pyrax-configuration
#exact_count = Explicitly ensure an exact count of instances, used with state=active/present. If specified as `yes' and `count' is less than the servers matched, servers will be deleted to match the count. If the number of matched servers is fewer than specified in `count' additional servers will be added.
#extra_client_args = A hash of key/value pairs to be used when creating the cloudservers client. This is considered an advanced option, use it wisely and with caution.
#extra_create_args = A hash of key/value pairs to be used when creating a new server. This is considered an advanced option, use it wisely and with caution.
#files = Files to insert into the instance. remotefilename:localcontent
#flavor = flavor to use for the instance
#group = host group to assign to server, is also used for idempotent operations to ensure a specific number of instances
#identity_type = Authentication machanism to use, such as rackspace or keystone
#image = image to use for the instance. Can be an `id', `human_id' or `name'
#instance_ids = list of instance ids, currently only used when state='absent' to remove instances
#key_name = key pair to use on the instance
#meta = A hash of metadata to associate with the instance
#name = Name to give the instance
#networks = The network to attach to the instances. If specified, you must include ALL networks including the public and private interfaces. Can be `id' or `label'.
#region = Region to create an instance in
#state = Indicate desired state of the resource
#tenant_id = The tenant ID used for authentication
#tenant_name = The tenant name used for authentication
#user_data = Data to be uploaded to the servers config drive. This option implies `config_drive'. Can be a file path or a string
#username = Rackspace username (overrides `credentials')
#verify_ssl = Whether or not to require SSL validation of API endpoints
#wait = wait for the instance to be in state 'running' before returning
#wait_timeout = how long before wait gives up, in seconds
}- name: ${2:Name for rax module.}
${3:  sudo: ${4:yes}}
  rax: ${5:api_key=${6: } }${7:auth_endpoint=${8: } }${9:auto_increment=${10: } }${11:config_drive=${12: } }${13:count=${14: } }${15:count_offset=${16: } }${17:credentials=${18: } }${19:disk_config=${20: } }${21:env=${22: } }${23:exact_count=${24: } }${25:extra_client_args=${26: } }${27:extra_create_args=${28: } }${29:files=${30: } }${31:flavor=${32: } }${33:group=${34: } }${35:identity_type=${36: } }${37:image=${38: } }${39:instance_ids=${40: } }${41:key_name=${42: } }${43:meta=${44: } }${45:name=${46: } }${47:networks=${48: } }${49:region=${50: } }${51:state=${52: } }${53:tenant_id=${54: } }${55:tenant_name=${56: } }${57:user_data=${58: } }${59:username=${60: } }${61:verify_ssl=${62: } }${63:wait=${64: } }${65:wait_timeout=${66: } }
${67:  when: ${68: variable is defined}}
${69:  with_items: ${70: array}}
]]></content>
	<tabTrigger>rax</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
