<snippet>
<content><![CDATA[
${1:#backup = Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
#content = When used instead of 'src', sets the contents of a file directly to the specified value.
#dest = Remote absolute path where the file should be copied to. If src is a directory, this must be a directory too.
#directory_mode = When doing a recursive copy set the mode for the directories. If this is not set we will use the system defaults. The mode is only set on directories which are newly created, and will not affect those that already existed.
#follow = This flag indicates that filesystem links, if they exist, should be followed.
#force = the default is `yes', which will replace the remote file when contents are different than the source.  If `no', the file will only be transferred if the destination does not exist.
#group = name of the group that should own the file/directory, as would be fed to `chown'
#mode = mode the file or directory should be, such as 0644 as would be fed to `chmod'. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx' or `u=rw,g=r,o=r').
#owner = name of the user that should own the file/directory, as would be fed to `chown'
#selevel = level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range'. `_default' feature works as for `seuser'.
#serole = role part of SELinux file context, `_default' feature works as for `seuser'.
#setype = type part of SELinux file context, `_default' feature works as for `seuser'.
#seuser = user part of SELinux file context. Will default to system policy, if applicable. If set to `_default', it will use the `user' portion of the policy if available
#src = Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with "/", only inside contents of that directory are copied to destination. Otherwise, if it does not end with "/", the directory itself with all contents is copied. This behavior is similar to Rsync.
#validate = The validation command to run before copying into place.  The path to the file to validate is passed in via '%s' which must be present as in the visudo example below. The command is passed securely so shell features like expansion and pipes won't work.
}- name: ${2:Name for copy module.}
${3:  sudo: ${4:yes}}
  copy: ${5:backup=${6: } }${7:content=${8: } }${9:dest=${10: } }${11:directory_mode=${12: } }${13:follow=${14: } }${15:force=${16: } }${17:group=${18: } }${19:mode=${20: } }${21:owner=${22: } }${23:selevel=${24: } }${25:serole=${26: } }${27:setype=${28: } }${29:seuser=${30: } }${31:src=${32: } }${33:validate=${34: } }
${35:  when: ${36: variable is defined}}
${37:  with_items: ${38: array}}
]]></content>
	<tabTrigger>copy</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
