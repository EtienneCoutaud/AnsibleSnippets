<snippet>
<content><![CDATA[
${1:#backrefs = Used with `state=present'. If set, line can contain backreferences (both positional and named) that will get populated if the `regexp' matches. This flag changes the operation of the module slightly; `insertbefore' and `insertafter' will be ignored, and if the `regexp' doesn't match anywhere in the file, the file will be left unchanged. If the `regexp' does match, the last matching line will be replaced by the expanded line parameter.
#backup = Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
#create = Used with `state=present'. If specified, the file will be created if it does not already exist. By default it will fail if the file is missing.
#dest = The file to modify.
#follow = This flag indicates that filesystem links, if they exist, should be followed.
#group = name of the group that should own the file/directory, as would be fed to `chown'
#insertafter = Used with `state=present'. If specified, the line will be inserted after the specified regular expression. A special value is available; `EOF' for inserting the line at the end of the file. May not be used with `backrefs'.
#insertbefore = Used with `state=present'. If specified, the line will be inserted before the specified regular expression. A value is available; `BOF' for inserting the line at the beginning of the file. May not be used with `backrefs'.
#line = Required for `state=present'. The line to insert/replace into the file. If `backrefs' is set, may contain backreferences that will get expanded with the `regexp' capture groups if the regexp matches. The backreferences should be double escaped (see examples).
#mode = mode the file or directory should be, such as 0644 as would be fed to `chmod'. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx' or `u=rw,g=r,o=r').
#others = All arguments accepted by the [file] module also work here.
#owner = name of the user that should own the file/directory, as would be fed to `chown'
#regexp = The regular expression to look for in every line of the file. For `state=present', the pattern to replace if found; only the last line found will be replaced. For `state=absent', the pattern of the line to remove.  Uses Python regular expressions; see http://docs.python.org/2/library/re.html.
#selevel = level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range'. `_default' feature works as for `seuser'.
#serole = role part of SELinux file context, `_default' feature works as for `seuser'.
#setype = type part of SELinux file context, `_default' feature works as for `seuser'.
#seuser = user part of SELinux file context. Will default to system policy, if applicable. If set to `_default', it will use the `user' portion of the policy if available
#state = Whether the line should be there or not.
#validate = validation to run before copying into place. Use %s in the command to indicate the current file to validate. The command is passed securely so shell features like expansion and pipes won't work.
}- name: ${2:Name for lineinfile module.}
${3:  sudo: ${4:yes}}
  lineinfile: ${5:backrefs=${6: } }${7:backup=${8: } }${9:create=${10: } }${11:dest=${12: } }${13:follow=${14: } }${15:group=${16: } }${17:insertafter=${18: } }${19:insertbefore=${20: } }${21:line=${22: } }${23:mode=${24: } }${25:others=${26: } }${27:owner=${28: } }${29:regexp=${30: } }${31:selevel=${32: } }${33:serole=${34: } }${35:setype=${36: } }${37:seuser=${38: } }${39:state=${40: } }${41:validate=${42: } }
${43:  when: ${44: variable is defined}}
${45:  with_items: ${46: array}}
]]></content>
	<tabTrigger>lineinfile</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
